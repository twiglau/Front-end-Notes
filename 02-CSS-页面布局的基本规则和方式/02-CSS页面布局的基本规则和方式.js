/**
 * 前端页面的布局和样式编写是传统技能,但页面样式的实现大多数都无法速成,需要通过不断
 * 练习,反复地调试才能熟练掌握,因此有些同学常常会感到疑惑,如:
 * > 1. 一个元素总宽高为50px,要怎么在调整边框大小的时候;不需要重新计算和
 *   设置width/height呢?
 * > 2. 为什么给一些元素设置宽高,但是却不生效?
 * > 3. 如何将一个元素固定在页面的某个位置,具体怎么做?
 * > 4. 为什么将某个元素z-index设置为999999,但是它依然被其他元素遮挡住了呢?
 * > 5. 为什么将某个元素里面的元素设置为float之后,这个元素的高度就歪了呢?
 * > 6. 让一个元素进行垂直和水平居中,有多少种实现方式?
 * 
 * 这些问题产生的根本,是对页面布局规则和常见页面布局方式没掌握透彻. 今天重新梳理下
 * 页面布局的基本规则和布局方式,让以上问题迎刃而解.
 */

/**
 * 一, 页面布局的基本规则
 * 在调试页面样式的时候,如不了解页面布局规则,会经常遇到"这里为什么歪了" "这里为什么又好了"
 * 这样的困惑. 其实页面的布局不只是"碰运气"似的调整样式,浏览器的页面布局会有一些规则,包括:
 * > 盒模型计算;
 * > 内联元素与块状元素布局规则;
 * > 文档流布局;
 * > 元素堆叠;
 * 
 * 下面我们可以结合问题逐一来看.
 */

/**
 * 二,盒模型计算
 * 问题1: 一个元素总宽高为30px,要怎么在调整边框大小的时候,不需要重新计算和设置width/height呢?
 * 
 * 这个问题涉及浏览器布局中的盒模型计算. 什么是盒模型? 浏览器对文档进行布局的时候,会将每个元素
 * 都表示为这样一个盒子.
 * 
 * 如图 02.1 示例图
 * 
 * 这就是CSS基础盒模型,也就是我们常说的盒模型. 盒模型主要用来描述元素所占空间的内容,它由4个部分组成:
 * > 外边框边界margin (橙色部分)
 * > 边框边界border (黄色部分)
 * > 内边距边界padding (绿色部分)
 * > 内容边界content (蓝色部分)
 * 
 * 盒子模型是根据元素的样式来进行计算的,我们可以通过调整元素的样式来改变盒子模型. 上图中的盒子
 * 模型来自下面这个<div>元素, 我们给这个元素设置了margin,padding和border:
 * <style>
 * .box-model-sample {
 *    margin: 10px;
 *    padding:10px;
 *    border:solid 2px #000;
 * }
 * </style>
 * <div class-"box-model-sample">这是一个div</div>
 * 
 * 在上述代码中,我们通过使用CSS样式来控制盒子模型的大小和属性. 盒子模型还常用来控制元素的尺寸,属性
 * (颜色,背景,边框等) 和位置,当我们在调试样式的时候,比较容易遇到以下这些场景.
 * 
 * > 1. 盒子模型会发生margin外边距叠加,叠加后的值会以最大边距为准. 比如,我们给两个相邻的<div>元素
 * 分别设置了不同的margin外边距:
 * 
 * <style>
 *   .box-model-sample {
 *      margin:10px;
 *      padding:10px;
 *      border:solid 2px #000;
 *   }
 *   .large-margin {
 *      margin: 20px;
 *   }
 * </style>
 * <div class="box-model-sample">这是一个div</div>
 * <div class="box-model-sample">这是另一个div</div>
 * <div class="box-model-sample large-margin">这是一个margin大一点的div</div>
 * 
 * 这段代码在浏览器中运行时,我们可以看到,两个<div>元素之间发生了margin外边距叠加,它们被
 * 合并成单个边距.
 * 
 * 如图 02.2 示例图
 * 
 * 如果两个元素的外边距不一样,叠加的值大小是各个边距中的最大值,比如上面第二个和第三个矩形之间的
 * 外边距值,使用的是第三个边框的外边距值20px.
 * 
 * 如图 02.3 示例图
 * 
 * 需要注意的是,并不是所有情况下都会发生外边距叠加,比如:
 * 行内框,浮动框或绝对定位框之间的外边距不会叠加.
 * 
 * 
 * 2.盒子模型计算效果有多种,比如元素宽高是否包括了边框. 我们可以通过box-sizing属性进行设置盒子
 * 模型的计算方式,正常的盒子模型默认值是content-box.
 * 
 * 使用box-sizing属性可以解决问题1 (调整元素的边框时,不影响元素的宽高),我们可以将元素的的
 * box-sizing 属性设置为 border-box:
 * 
 * <style>
 *    .box-model-sample {
 *       height: 50px;
 *       margin: 10px;
 *       padding: 5px;
 *       border: solid 2px #000;
 *    }
 *    .border-box {
 *       box-sizing:border-box;
 *    }
 * </style>
 * <div class="box-model-sample">这是一个div(content-box)</div>
 * <div class="box-model-sample border-box">这是另一个div(border-box)</div>
 * 
 * 对于默认content-box的元素来说,元素所占的总宽高为设置的元素宽高(width/height)等于:
 * content + padding + border, 因此这里该元素总高度为 50 + 5*2 + 2*2 = 64px.
 * 
 * 如下: 02.4 示例图
 * 
 * 当我们设置为border-box之后,元素所占的总宽高为设置的元素宽高(width/height),因此,此时
 * 高度为50px:
 * 
 * 如下: 02.5 示例图
 * 
 * 也就是说,如果我们在调整元素边框的时候,不影响元素的宽高,可以给元素的box-sizing属性设置为
 * border-box, 这便是问题1 的答案, 通过这种方式, 我们可以精确地控制元素的空间占位,同时
 * 还能灵活地调整元素边框和内边距.
 * 
 * 虽然我们可以通过模型设置元素的占位情况,但是有些时候我们给元素设置宽高却不生效(见问题2),这
 * 是因为元素本身的性质也做了区分.
 */


/**
 * 三, 内联元素与块状元素
 * 在浏览器中,元素可分为内联元素和块状元素. 比如: <a>元素为内联元素, <div>元素为块状元素,我们
 * 分别给它们设置宽高:
 * 
 * <style>
 *    a,
 *    div {
 *      width: 100px;
 *      height: 20px;
 *    }
 * </style>
 * 
 * <a>a-123</a><a>a-456</a><a>a-789</a>
 * <div>div-123</div>
 * <div>div-456</div>
 * <div>div-789</div>
 * 
 * 在浏览器中的效果如下:
 * 
 * 如下: 02.6 示例图
 * 
 * 可以看到,<a>元素和<div>元素最主要的区别在于:
 * > <a>元素(内联元素)可以和其他内联元素位于同一行,且宽高设置无效;
 * > <div>元素(块状元素)不可和其他元素位于同一行,且宽高设置有效;
 * 
 * 所以问题2的答案是,当我们给某个元素设置宽高不生效,是因为该元素为内联元素. 那么有没有办法
 * 解决这个问题呢?
 * 
 * 我们可以通过设置 display 的值来对元素进行调整.
 * > 设置为block块状元素,此时可以设置宽度width和高度height.
 * > 设置为inline内联元素,此时宽度高度不起作用.
 * > 设置为inline-block,可以理解为块状元素和内联元素的结合,布局规则包括:
 *   > 位于块状元素或者其他内联元素内;
 *   > 可容纳其他块状元素或内联元素;
 *   > 宽度高度起作用;
 * 
 * 除了内联元素和块状元素,我们还可以将设置为inline-block, inline-block可以很方便解决一些问题:
 * 使元素居中,给inline元素(<a>/<span>)设置宽高,将多个块状元素放在一行等.
 */

/**
 * 四, 文档流和元素定位
 * 接下来,来看问题: 将一个元素固定在页面的某个位置,可以怎么做? 这个问题涉及文档流的布局和元素
 * 定位的样式设置.
 * 
 * 什么是文档流? 正常的文档流在 HTML 里面为从上到下,从左到右的排版布局.
 * 
 * 文档流布局方式可以使用position样式进行调整,包括: static(默认值),inherit(继承父元素),relative(相对定位),
 * absolute(相对非static父元素绝对定位), fixed(相对浏览器窗口进行绝对定位)
 * 
 * 我们来分别看下这些position样式设置效果.
 * 
 * 1.元素position样式属性值为static(默认值)时,元素会忽略top/bottom/left/right或者z-index声明,
 * 比如我们给部分元素设置position:static的样式以及left和top定位:
 * 
 * a,p,div {
 *   border: solid 1px red;
 * }
 * .static {
 *   position: static;
 *   left: 100px;
 *   top: 100px;
 * }
 * 在浏览器中,我们可以看到给 position:static 的元素添加定位 left: 100px; top: 100px;是无效的.
 * 
 * 如图  02.7 示意图   -> static元素的定位设置无效果
 * 
 * 2.元素position样式属性值为relative时,元素会保持原有文档流,但相对本身的原始位置发生位移,
 */