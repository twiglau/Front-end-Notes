/**
 * 如何将应用抽象成数据
 * 1. 将应用进行模块化和组件化划分;
 * 2. 将这些模块和组件用数据的方式进行表达.
 */

/**
 * 一, 将页面划分成模块和组件.
 */
/**
 * 二,将模块/组件抽象成数据.
 * 通常来说,我们可以抽离应用中存在变化的内容和动态获取的数据,在通过将
 * 这些数据与页面内容绑定的方式(比如使用前端框架进行绑定),来控制具体功能
 * 的展示.
 * 
 * 我们可以通过数据的来源,将其分成内部数据(状态数据) 和 外部数据(动态数据)
 * 两种.
 */

/**
 * 三, 内部数据(状态数据)
 * 在一个应用的设计里,我们可能会有多个组件,每个组件又各自维护这自己的某些转台.其中,
 * 部分组件的状态相互影响,所有状态的结合体便是应用最终的整体状态.这些状态维护在应用
 * 内部,可以通过数据的方式来表示,简单称之为内部数据(状态数据).
 * 
 * 怎么定义内部数据? 最浅显,最直观的办法就是,这些数据来自应用本身,同时影响应用的呈现状态.如
 * 对话框的出现和隐藏,标签的激活和失效,进度条的状态等,都可以作为状态数据.
 * 
 * 比如,用户在网页中的一些操作,点击某个按钮之后,会出现弹窗,这个弹窗的展示内容以及是否展示的状态
 * 可以用对象来描述.
 */
 const dialog = {
    isShow: true,
    title: "弹窗标题",
    content: "弹窗内容"
  };

  /**
   * 四, 外部数据(动态数据)
   * 除了应用本身的状态数据,还有很多不属于应用状态的数据,比如文章内容,个人信息等,都是需要从
   * 其他地方(服务端,缓存,文件等)获取的. 这些需要从外部获取,用于页面展示或是影响展示的一些数据,
   * 我们将它称作外部数据(动态数据).
   * 
   * 外部数据不同于内部数据,它并不会跟随着应用的声明周期而改变,也不会随着应用的关闭而消失.
   * 这些数据独立存在于外部,通过动态获取和注入的方式进入应用,从而影响应用的展示内容和功能逻辑.
   * 
   * 举个例子,上面博客中的内容板块为列表页,这样的列表页可以用一个数组来表示:
   */

const articleList = [
    { id: 333, title: "文章标题", brief: "文章简介", date: "日期" }
    // ...
];

/**
 * 这些数据需要从本地数据库中读取,或者通过HTTP请求从服务端获取,再根据获取结果渲染出每个列表的内容.
 * 
 * 我们在设计模块和组件的时候,需要将这些内部数据和外部数据抽离出来,其中内部数据在组件和模块内部进行维护.
 * 当应用启动的时候,再通过注入外部数据的方式,使其可以正常运行.
 */

/**
 * 五, 将数据与应用抽离
 * .........
 */