/**
 * 在前面第10将中,我介绍了前端框架的核心能力---模板引擎.其实,除了模板引擎以外,
 * 前端框架还提供了很多其他的能力,比如性能优化相关,状态管理相关等.现如今,虽然
 * 各式各样的框架层出不穷,但稳定的有三 Angular/React/Vue.
 * 
 * 对于不同的前端框架来说,各自的设计原理和解决方案都有所不同,开发者可根据自身需要
 * 选择合适的前端框架.
 * 
 * 今天,来看下Angular/React/Vue三个框架之间的区别,各自的特点和和使用场景等
 */

/**
 * 一, Angular/React/Vue框架对比
 * Angular是一个应用设计框架与开发平台,用于创建高效,复杂,精致的单页面应用,提供了
 * 前端项目开发比较完整的解决方案.
 * 
 * 与此相对,React/Vue则专注于构建用户界面,在一定程度上来说是一个JavaScript库,不能
 * 称之为框架.
 * 
 * 由于React/Vue都提供了配套的页面应用解决方案和工具库,因此我们常常将它们作为前端
 * 框架与Angular放在一起比较.
 * 
 * 实际上,三个框架的关系可以简单用这样的公式表达.
 * 
 * Angular = React/Vue + 路由库（react-router/vue-router） + 状态管理（Redux/Flux/Mobx/Vuex） + 脚手架/构建（create-react-app/Vue CLI/Webpack） + ...
 */

/**
 * 二, Angular
 * Angular最初的设计是针对大型应用进行的,上手成本较高,因为开发者需要掌握一些对前端开发来说较为
 * 陌生的概念,其中包括依赖注入,模块化,脏检查,AOT等设计.
 */

/**
 * 1, 依赖注入
 * 依赖注入并不是由Angular提出的,它是基于依赖倒置的设计原则设计出来的一套机制.
 * 
 * 在项目中,依赖注入体现为: 项目提供了这样一个注入机制,其中有人负责提供服务,有人负责消耗服务,
 * 通过注入机制搭建了提供服务与消费服务之间的接口. 对于消费者来说,无须关心服务是否已经被创建
 * 并初始化,依赖注入机制会保证服务的可用性.
 * 
 * 在这样的机制下,开发者只需要关注如何使用服务,至于这个服务内部的实现是怎样的,它是什么时候被
 * 初始化的,它又依赖了怎样的其他服务,都交给了依赖注入机制来处理,不需要操心.
 * 
 * Angular提供的便是这样一套依赖注入系统,可以及时创建和交付所依赖的服务. Angular通过依赖注入来帮你
 * 更容易地将应用逻辑分解为服务,并让这些服务可用于各个组件中. 这便是Angular中的依赖注入设计.
 * 
 * 前面提到,Angular的设计是针对大型应用的,使用依赖注入可以轻松地将各个模块进行解耦,模块与模块之间不会有
 * 过多的依赖,可以轻松解决大型应用中模块难以管理的难题.所以在Angular中,依赖注入配合模块化组织能达到更好
 * 的效果.
 */

/**
 * 2, 模块化组织
 * Angular模块把组件,指令和管道打包成内聚的功能块,每个模块聚焦一个特性区域,业务领域,工作流或
 * 通用工具.
 * 
 * 所以我们可以用Angular模块来自行聚焦某个领域的功能模块,也可以使用Angular封装好的一些功能模块,
 * 像表单模块FormModule,路由模块RouterModule,Http模块,等等.
 * 
 * 通过依赖注入的方式,我们可以直接在需要的地方引入这些模块并使用. 模块的组织结构为树状结构,不同层级的模块
 * 功能组成了完整的应用.通过树状的方式来,依赖注入系统可高效地对服务进行创建和销毁,管理各个模块之间的依赖
 * 关系.
 * 
 * 其中,脏检查机制也由于模块化组织的设计,被诟病的性能问题得以解决.
 */

/**
 * 3, 状态更新: 脏检查机制
 * 什么是脏检查? 在Angular中,触发视图更新的时机来自常见的事件如用户交互(点击,输入等),定时器,声明周期,
 * 大概的过程如下:
 * 
 * 1. 在上述时机被触发后,Angular会计算数据的新值和旧值是否有差异;
 * 2. 若有差异,Angular会更新页面,并触发下一次的脏检查;
 * 3. 直到新旧值之间不再有差异,或是脏检查的次数达到设定阈值,才会停下来.
 * 
 * 
 */