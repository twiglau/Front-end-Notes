/**
 * 梳理知识体系:
 * 回提到面试问题,也有提到的知识点和问题,去进行学习和发散,从而补齐自己缺失的知识和技能.
 * 首先,来查看前端面试过程中核心基础的知识领域,包括三大块内容:
 * > 前端三件套 HTML/CSS/JavaScript;
 * > 与JavaScript运行环境相关的浏览器和Node.js;
 * > 前端开发通用领域,网络,安全,算法和计算机通用知识;
 */

/**
 * 一, HTML 与 CSS
 * 对于 HTML, 面试官很多时候会考察DOM元素相关的问题,包括DOM操作,事件冒泡/委托,虚拟DOM设计等内容.
 * 因此,关于 HTML 的内容更多是结合浏览器机制一起考察.
 * 
 * 如图 01.1 示例图
 * 
 * 其中, DOM操作与性能问题,事件委托以及浏览器中对<script>和<style>标签的处理过程,这个将在
 * 01讲中进行讲解,其中也会稍微提到虚拟DOM的内容. 但对于虚拟DOM设计存在的问题和各个框架是怎
 * 样进行优化的,将在"17 | Angular/React/Vue三大前端框架的设计特色"中介绍
 * 
 * 接下来是CSS,对于CSS的熟练程度会引人而异,面试官在面试 1~3 年经验的前端岗位候选人时会更多
 * 倾向于考察对页面布局原理的掌握,包括盒子模型,文档流,浮动布局等,以及常见页面布局的技巧,包括
 * 传统布局,Flex布局和Grid布局.
 * 
 * 同时,页面布局涉及浏览器的渲染过程,因此同样需要注意一些性能问题.
 * 
 * 如图 01.2 示例图
 * 
 * 有些时候,面试官也会通过让候选人编码实现某些样式/元素的方式,来考察对CSS的掌握程度,其中页面布局
 * (居中,对齐等)便是比较常见的考察点.
 * 
 * 对于页面布局原理和常见页面布局的技巧,将在02课时中介绍,而关于浏览器的布局过程则会在08课时中结合
 * 浏览器结构和运行机制一起介绍.
 * 
 * 从上述的面试点可以看出, HTML 与 CSS 的知识基本上围绕着设计原理和运行机制来考察,而对于具体的使用
 * 方式都很少会问到. 所以 HTML/CSS的核心知识点不算多,我们课程中前面两江基本上都有大致概括.
 */


/**
 * 二, JavaScript
 * 对于JavaScript,面试官常常会考察JavaScript语言的设计(如原型继承,单线程),以及JavaScript的运行过程
 * (比如作用域和闭包,执行上下文与this,Event Loop等).这些内容主要是为了考察候选人对JavaScript语言本
 * 身特点的理解,通常来说可能会包括这些内容.
 * 
 * 如图 01.3 示例图
 * 
 * 关于JavaScript语言的设计及其运行过程,将在课程的第3 ~ 5 将中分别进行介绍,你也可以从中思考出这些科目
 * 的答案.
 * 
 * 除此之外,很多时候面试官会以写代码的形式来对JavaScript中一些知识点进行考察,如:
 * > 手写代码实现 call/apply/bind.
 * > JavaScript中 0.1 + 0.2 为什么等于 0.300000000000000004,如何通过代码解决这个问题?
 * 
 * 除此之外,现在越来越多的团队也会使用 ES6/ES7 相关的语法,常见的包括箭头函数, Promise/async/await,class等.
 * ES6/ES7基本上都是语法糖,最终在浏览器中运行的很多时候都是最终编译为ES5的代码,因此面试官也常常会考察这些语法糖
 * 设计的原因,以及具体的实现,包括:
 * > 手写代码实现Promise;
 * > 为什么要使用async,await;
 * > 怎样让ES6/ES7代码可以跑在各个浏览器中(考察Babel与polyfill);
 * > 介绍Set和Map数据结构;
 * > Javascript是怎么实现let和const作用域的;
 * 
 * 编码过程的思考很重要,这也是为什么大多团队都会设置笔试题环节的原因.再者,对于开发来说,最终工作内容大部分依赖代码实现,
 * 因此编码风格,编码思路都会被列为考察点之一.
 * 
 * 我们知道,现在的JavaScript基本都会运行在JavaScript引擎中,大多数时候都在两个环境下运行:浏览器和Node.js.因此,对于
 * 这两个前端开发常常接触到的领域,同样也是面试官比较倾向的考察点.
 */

/**
 * 浏览器相关
 * 浏览器作为直接与用户交互的媒介,也作为前端开发必不可少的开发工具,其中的运行原理基本上都需要掌握. 通常来说,面试官会从
 * 一个叫"在浏览器地址栏里输入URL,按下回车键,会发生什么?" 中进行考察,首先会经过下面"网络相关"部分提到的HTTP请求过程,可
 * 能还会涉及以下内容:
 * 
 * 如图 01.4 示例图
 * 
 * 关于浏览器的结构和运行机制,将在 08 课时进行讲解. 其中涉及网络请求和HTTP相关的部分内容,则会在第 7~8将中介绍,同时我会带
 * 你了解浏览器的架构,线程和进程间的协作.在学习完这几讲的内容之后,你也可以整合其中的各个流程,梳理出根据自身理解而调整的最
 * 终流程和步骤.
 */

/**
 * 三, Node.js相关
 * Node.js和浏览器除了全局对象不一致以外,它们的Event Loop 机制也有所区别.
 * 
 * 如图 01.5 示例图
 */

/**
 * 四,网络相关
 * 不管是网页,小程序,还是依赖JavaScript移值到客户端进行的原生应用开发(比如 React Native,Weex,Electron等),我们基本上都
 * 离不开与服务端的通信,因此,我们还需要掌握网络相关的专业知识.
 * 
 * 很多面试官都喜欢问 "一个完整的HTTP请求过程" 这个问题. 通过这样一个问题,面试官可以了解到候选人对网络请求过程到浏览器渲染
 * 过程的掌握情况,其中网络相关的知识点会涉及以下知识点.
 * 
 * 如图 01.6 示例图
 * 
 * 这些内容会在"06 | 一个网络请求是怎么进行的"中围绕核心内容进行介绍.
 * 
 * 其次,网络请求存在各式各样的情况,比如使用缓存,建立Websocket,短轮询与长轮询,获取用户
 * 登录状态等,这些内容都会直接与HTTP协议相关. 因此, HTTP协议相关的知识点也经常会被考察到,包括以下知识点.
 * 
 * 如图 01.7 示例图
 * 
 * 其中, HTTP 消息体结构属于很基础的内容,我们的课程中并不会大范围介绍,在07课时中,主要围绕场景的HTTP协议应用场景来让你更好
 * 地理解HTTP协议相关内容.
 * 
 * 除此之外,关于网络请求的性能优化也常常会被关注到. 一般来说,网络请求的优化方案可能涉及缓存的使用,减少资源大小(分片,压缩,懒加载,
 * 预加载),减少每个环节的耗时( DNS 查询,使用 CND),使用 HTTP/2 等各种应用场景,这些内容将在 21~22 讲中进行介绍.
 */

/**
 * 五, 安全相关
 * Web 安全是所有系统设计中都会关注的问题,对于前端开发来说,我们也需要时刻考虑是否存在安全风险.一般来说,常见的安全问题包括
 * 前端安全和其他Web安全.
 * 
 * 如图 01.8 示例图
 * 
 * 其中, XSS和CSRF 是前端最容易遇到的问题,也是我们在开发过程中都要考虑的风险. 我们不仅需要了解它们的攻击手段,更要掌握对其
 * 防范方案,这些分别在 "07 | HTTP协议和前端开发有什么关系" 和 "10 | 掌握前端框架模板引擎的实现原理" 中进行介绍. 学习了这些
 * 内容以后,或许你也会知道如何使用前端框架可以避免 XSS 漏洞. 而当你在学习 "11 | 为什么说小程序比较特殊" 之后,也能明白为什么
 * 在小程序中不存在XSS 和 CSRF 安全风险.
 * 
 * 除了与前端密切相关的XSS和CSRF以外,如果你对其他Web安全相关的知识也感兴趣,可以继续学习 <Web安全攻防之道>专栏 [https://kaiwu.lagou.com/course/courseInfo.htm?courseId=585#/sale&fileGuid=xxQTRXtVcqtHK6j8],
 * 或者推荐阅读 <白帽子讲Web安全> 一书.
 */

/**
 * 六, 算法与数据结构
 * 如图 01.9 示例图
 */

/**
 * 七, 计算机通用知识
 * 如图 01.10 示例图
 */

/**
 * 总结
 * 如图 01.11 示例图
 */